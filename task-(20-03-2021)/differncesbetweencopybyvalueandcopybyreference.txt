Javascript has 5 data types that are passed by value: Boolean, null, undefined, String, and Number.
Javascript has 3 data types that are passed by reference: Array, Function, and Object

Copy by Value:
If a primitive type is assigned to a variable, we can think of that variable as containing the primitive value.
var x = 10;
var y = 'abc';
var z = null;
x contains 10. y contains 'abc'. To cement this idea, we’ll maintain an image of what these variables and their respective values look like in memory.
When we assign these variables to other variables using =, we copy the value to the new variable. They are copied by value.
var x = 10;
var y = 'abc';
var a = x;
var b = y;
console.log(x, y, a, b); // -> 10, 'abc', 10, 'abc'
Both a and x now contain 10. Both b and y now contain 'abc'. They’re separate, as the values themselves were copied.
Changing one does not change the other. Think of the variables as having no relationship to each other.

=====================================================================================================================

Copy By Reference:
But for objects it is different
Variables that are assigned a non-primitive value are given a reference to that value. That reference points to the object’s location in memory. The variables don’t actually contain the value
Objects are created at some location in your computer’s memory. When we write arr = [], we’ve created an array in memory. What the variable arr receives is the address, the location, of that array.
Let’s pretend that address is a new data type that is passed by value, just like number or string. An address points to the location, in memory, of a value that is passed by reference. Just like a string is denoted by quotation marks ('' or ""), an address will be denoted by arrow brackets, <>
A representation of lines 1 and 2 above in memory is
1.)variables:arr
   Values:<#001>
   address:#001
   objects:[] 
2.)variables:arr
   Values:<#001>
   address:#001
   objects:[1]    
Notice that the value, the address, contained by the variable arr is static. The array in memory is what changes. When we use arr to do something, such as pushing a value, the Javascript engine goes to the location of arr in memory and works with the information stored there.